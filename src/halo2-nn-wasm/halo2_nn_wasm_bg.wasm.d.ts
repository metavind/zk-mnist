/* tslint:disable */
/* eslint-disable */
export function __wbg_nnwasm_free(a: number): void;
export function nnwasm_new(a: number): number;
export function nnwasm_forward(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_halo2wasm_free(a: number): void;
export function halo2wasm_new(): number;
export function halo2wasm_clear(a: number): void;
export function halo2wasm_clear_instances(a: number): void;
export function halo2wasm_verify(a: number, b: number, c: number): void;
export function halo2wasm_get_instances(a: number, b: number, c: number): void;
export function halo2wasm_set_instances(a: number, b: number, c: number, d: number): void;
export function halo2wasm_get_instance_values(a: number, b: number): number;
export function halo2wasm_config(a: number, b: number): void;
export function halo2wasm_get_circuit_stats(a: number): number;
export function halo2wasm_get_vk(a: number, b: number): void;
export function halo2wasm_get_partial_vk(a: number, b: number): void;
export function halo2wasm_get_pk(a: number, b: number): void;
export function halo2wasm_assign_instances(a: number): void;
export function halo2wasm_mock(a: number): void;
export function halo2wasm_load_params(a: number, b: number, c: number): void;
export function halo2wasm_load_vk(a: number, b: number, c: number): void;
export function halo2wasm_gen_vk(a: number): void;
export function halo2wasm_gen_pk(a: number): void;
export function halo2wasm_prove(a: number, b: number): void;
export function halo2wasm_log(a: number, b: number, c: number): void;
export function init_panic_hook(): void;
export function __wbg_halo2libwasm_free(a: number): void;
export function halo2libwasm_new(a: number): number;
export function halo2libwasm_add(a: number, b: number, c: number): number;
export function halo2libwasm_sub(a: number, b: number, c: number): number;
export function halo2libwasm_neg(a: number, b: number): number;
export function halo2libwasm_mul(a: number, b: number, c: number): number;
export function halo2libwasm_mul_add(a: number, b: number, c: number, d: number): number;
export function halo2libwasm_mul_not(a: number, b: number, c: number): number;
export function halo2libwasm_assert_bit(a: number, b: number): void;
export function halo2libwasm_div_unsafe(a: number, b: number, c: number): number;
export function halo2libwasm_assert_is_const(a: number, b: number, c: number, d: number): void;
export function halo2libwasm_inner_product(a: number, b: number, c: number, d: number, e: number): number;
export function halo2libwasm_sum(a: number, b: number, c: number): number;
export function halo2libwasm_and(a: number, b: number, c: number): number;
export function halo2libwasm_or(a: number, b: number, c: number): number;
export function halo2libwasm_not(a: number, b: number): number;
export function halo2libwasm_dec(a: number, b: number): number;
export function halo2libwasm_select(a: number, b: number, c: number, d: number): number;
export function halo2libwasm_or_and(a: number, b: number, c: number, d: number): number;
export function halo2libwasm_bits_to_indicator(a: number, b: number, c: number, d: number): void;
export function halo2libwasm_idx_to_indicator(a: number, b: number, c: number, d: number, e: number): void;
export function halo2libwasm_select_by_indicator(a: number, b: number, c: number, d: number, e: number): number;
export function halo2libwasm_select_from_idx(a: number, b: number, c: number, d: number): number;
export function halo2libwasm_is_zero(a: number, b: number): number;
export function halo2libwasm_is_equal(a: number, b: number, c: number): number;
export function halo2libwasm_num_to_bits(a: number, b: number, c: number, d: number, e: number): void;
export function halo2libwasm_constrain_equal(a: number, b: number, c: number): void;
export function halo2libwasm_range_check(a: number, b: number, c: number, d: number): void;
export function halo2libwasm_check_less_than(a: number, b: number, c: number, d: number, e: number): void;
export function halo2libwasm_check_less_than_safe(a: number, b: number, c: number, d: number): void;
export function halo2libwasm_is_less_than(a: number, b: number, c: number, d: number, e: number): number;
export function halo2libwasm_is_less_than_safe(a: number, b: number, c: number, d: number): number;
export function halo2libwasm_div_mod(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function halo2libwasm_div_mod_var(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function halo2libwasm_pow_var(a: number, b: number, c: number, d: number, e: number): number;
export function halo2libwasm_poseidon(a: number, b: number, c: number): number;
export function halo2libwasm_witness(a: number, b: number, c: number): number;
export function halo2libwasm_constant(a: number, b: number, c: number): number;
export function halo2libwasm_make_public(a: number, b: number, c: number, d: number): void;
export function halo2libwasm_log(a: number, b: number, c: number): void;
export function halo2libwasm_value(a: number, b: number, c: number): void;
export function halo2libwasm_lookup_bits(a: number): number;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_thread_destroy(a: number, b: number): void;
export function __wbindgen_start(): void;
